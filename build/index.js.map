{"version":3,"sources":["../src/index.js"],"names":["Pagination","props","state","paginationOutData","itemsPerPage","cursor","displaySize","displayStartsAt","pageButtonsStack","previousButtonClass","nextButtonClass","perPage","setState","setNextPrevButtonStatus","createPageButtonStack","prevProps","totalPrev","total","Math","ceil","maxNumberOfButtons","getTotalNumberOfButtons","middle","length","direction","itemsArr","displayEnd","i","push","cursorGap","maxGapEnd","maxGap","abs","newStartAt","onPropertyChange","nextCursor","decideWalkingDirection","walkToLeft","walkToRight","e","newItemsPerPage","target","value","page","paginationData","paginationPerPageList","defaultPerPage","perPageItemOptions","map","option","paginationButtons","elm","handleCurrentPage","handleItemsPerPage","handlePrevious","handleNext","Component","propTypes","PropTypes","number","isRequired","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass Pagination extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            paginationOutData: {\n                itemsPerPage: 0,\n                cursor: 1,\n            },\n            displaySize: 5, // how many page buttons show\n            displayStartsAt: 1, // page buttons start number\n            pageButtonsStack: [], // page buttons to show on current go\n            previousButtonClass: 'lst-disabled',\n            nextButtonClass: '',\n        };\n    }\n\n    async componentDidMount() {\n        const { perPage } = this.props;\n\n        await this.setState({\n            paginationOutData: {\n                itemsPerPage: perPage,\n                cursor: 1,\n            },\n        });\n\n        this.setNextPrevButtonStatus();\n\n        this.createPageButtonStack();\n    }\n\n    async componentDidUpdate(prevProps) {\n        const { total: totalPrev } = prevProps;\n        const { total, perPage } = this.props;\n\n        if (total !== totalPrev) {\n            await this.setState({\n                paginationOutData: {\n                    itemsPerPage: perPage,\n                    cursor: 1,\n                },\n                displayStartsAt: 1,\n            });\n\n            this.setNextPrevButtonStatus();\n\n            this.createPageButtonStack();\n        }\n    }\n\n    getTotalNumberOfButtons() {\n        const { paginationOutData: { itemsPerPage } } = this.state;\n        const { total } = this.props;\n\n        return Math.ceil(total / itemsPerPage);\n    }\n\n    async setNextPrevButtonStatus() {\n        const { paginationOutData: { cursor } } = this.state;\n        const maxNumberOfButtons = this.getTotalNumberOfButtons();\n        const nextButtonClass = (cursor === maxNumberOfButtons) ? 'lst-disabled' : '';\n        const previousButtonClass = (cursor === 1) ? 'lst-disabled' : '';\n\n        await this.setState({ previousButtonClass, nextButtonClass });\n    }\n\n    decideWalkingDirection() {\n        const { paginationOutData: { cursor }, pageButtonsStack } = this.state;\n        const middle = pageButtonsStack[Math.ceil(pageButtonsStack.length / 2) - 1];\n        let direction = '';\n\n        if (middle > cursor) { direction = 'left'; }\n        if (middle < cursor) { direction = 'right'; }\n\n        return direction;\n    }\n\n    async createPageButtonStack() {\n        const { displayStartsAt, displaySize } = this.state;\n        const itemsArr = [];\n        const maxNumberOfButtons = this.getTotalNumberOfButtons();\n        const displayEnd = maxNumberOfButtons <= displaySize ? maxNumberOfButtons : displaySize;\n        for (let i = displayStartsAt; i < displayStartsAt + displayEnd; i += 1) {\n            itemsArr.push(i);\n        }\n\n        await this.setState({ pageButtonsStack: itemsArr });\n    }\n\n    async walkToRight() {\n        const { displayStartsAt, displaySize, pageButtonsStack, paginationOutData: { cursor } } = this.state;\n\n        // check how many buttons can be go\n        const maxNumberOfButtons = this.getTotalNumberOfButtons();\n        const cursorGap = cursor - pageButtonsStack[Math.ceil(pageButtonsStack.length / 2) - 1];\n\n        if (displayStartsAt + displaySize <= maxNumberOfButtons) {\n            const maxGapEnd = maxNumberOfButtons - displaySize - displayStartsAt + 1;\n            const maxGap = (displayStartsAt + cursorGap + displaySize) >= maxNumberOfButtons ? maxGapEnd : cursorGap;\n\n            await this.setState({ displayStartsAt: displayStartsAt + maxGap });\n\n            this.createPageButtonStack();\n        }\n    }\n\n    async walkToLeft() {\n        const { displayStartsAt, paginationOutData: { cursor }, pageButtonsStack } = this.state;\n        const cursorGap = Math.abs(pageButtonsStack[Math.ceil(pageButtonsStack.length / 2) - 1] - cursor);\n\n        // check how many buttons can be go\n        if (displayStartsAt > 1) {\n            const newStartAt = displayStartsAt - cursorGap === 0 ? 1 : displayStartsAt - cursorGap;\n            await this.setState({ displayStartsAt: newStartAt });\n\n            this.createPageButtonStack();\n        }\n    }\n\n    async handlePrevious() {\n        const { paginationOutData: { cursor, itemsPerPage } } = this.state;\n        const { onPropertyChange } = this.props;\n\n        const nextCursor = cursor > 1 ? cursor - 1 : cursor;\n\n        await this.setState({ paginationOutData: { cursor: nextCursor, itemsPerPage } });\n\n        const direction = this.decideWalkingDirection();\n\n        this.setNextPrevButtonStatus();\n\n        if (direction === 'left') {\n            this.walkToLeft();\n        }\n\n        onPropertyChange({ cursor: nextCursor, itemsPerPage });\n    }\n\n    async handleNext() {\n        const { paginationOutData: { cursor, itemsPerPage } } = this.state;\n        const { onPropertyChange } = this.props;\n\n        const nextCursor = cursor < this.getTotalNumberOfButtons() ? cursor + 1 : cursor;\n\n        await this.setState({ paginationOutData: { cursor: nextCursor, itemsPerPage } });\n\n        const direction = this.decideWalkingDirection();\n\n        this.setNextPrevButtonStatus();\n\n        if (direction === 'right') {\n            this.walkToRight();\n        }\n\n        onPropertyChange({ cursor: nextCursor, itemsPerPage });\n    }\n\n    async handleItemsPerPage(e) {\n        const newItemsPerPage = e.target.value;\n        const { onPropertyChange } = this.props;\n\n        const paginationOutData = {\n            itemsPerPage: newItemsPerPage,\n            cursor: 1,\n        };\n\n        await this.setState({ paginationOutData, displayStartsAt: 1 });\n\n        this.setNextPrevButtonStatus();\n\n        onPropertyChange(paginationOutData);\n\n        this.createPageButtonStack();\n    }\n\n    async handleCurrentPage(page) {\n        const { paginationOutData: { itemsPerPage } } = this.state;\n        const { onPropertyChange } = this.props;\n\n        const paginationData = { cursor: page, itemsPerPage };\n\n        await this.setState({ paginationOutData: paginationData });\n\n        const direction = this.decideWalkingDirection();\n\n        this.setNextPrevButtonStatus();\n\n        if (direction === 'right') {\n            this.walkToRight();\n        }\n\n        if (direction === 'left') {\n            this.walkToLeft();\n        }\n\n        onPropertyChange(paginationData);\n    }\n\n    render() {\n        const { paginationOutData: { cursor }, pageButtonsStack, previousButtonClass, nextButtonClass } = this.state;\n\n        const { total, perPage } = this.props;\n\n        const paginationPerPageList = [5, 10, 15];\n\n        const defaultPerPage = 5;\n\n        const perPageItemOptions = paginationPerPageList.map(option => <option key={option}>{option}</option>);\n\n        const paginationButtons = pageButtonsStack.map(elm => (<button type=\"button\" key={elm} className={`page number ${elm === cursor ? 'active' : ''}`} onClick={e => this.handleCurrentPage(elm)}>{elm}</button>));\n\n        return (total > 0\n            && (\n                <div className=\"pagination-wrapper\">\n                    <span className=\"per-page\">Per Page\n                        <select className=\"form-control\" value={perPage || defaultPerPage} onChange={e => this.handleItemsPerPage(e)}>\n                            {perPageItemOptions}\n                        </select>\n                    </span>\n                    <div className=\"page-wrapper mobile-custom-margin\">\n                        <button type=\"button\" className={`page prev-page ${previousButtonClass}`} onClick={e => this.handlePrevious()}>\n                            <img src=\"../assets/images/paginate-left.png\" alt=\"\" />\n                        </button>\n                        {paginationButtons}\n                        <button type=\"button\" className={`page next-page ${nextButtonClass}`} onClick={e => this.handleNext()}>\n                            <img src=\"../assets/images/paginate-right.png\" alt=\"\" />\n                        </button>\n                    </div>\n                </div>\n            )\n        );\n    }\n}\n\nPagination.propTypes = {\n    total: PropTypes.number.isRequired,\n    perPage: PropTypes.number,\n    onPropertyChange: PropTypes.func,\n};\n\nPagination.defaultProps = {\n    onPropertyChange: null,\n    perPage: 5,\n};\n\nexport default Pagination;\n"],"file":"index.js"}